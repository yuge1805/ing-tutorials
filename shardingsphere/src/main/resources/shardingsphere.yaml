mode:
  type: Cluster
  repository:
    type: Zookeeper # 持久化仓库类型
    props: # 持久化仓库所需属性
      namespace: appname-shardingshpere # 注册中心命名空间
      server-lists: my.ing:2181  # 注册中心连接地址
      retryIntervalMilliseconds: 5000
      timeToLiveSeconds: 60
      maxRetries: 3
      operationTimeoutMilliseconds: 10000

dataSources:
  ds_0:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.jdbc.Driver
    jdbcUrl: jdbc:mysql://my.ing:13306/ds_0?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&useSSL=false&autoReconnect=true&failOverReadOnly=false
    username: root
    password: ${ZING_MYSQL_PW:root}
  ds_1:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.jdbc.Driver
    jdbcUrl: jdbc:mysql://my.ing:23306/ds_1?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&useSSL=false&autoReconnect=true&failOverReadOnly=false
    username: root
    password: ${ZING_MYSQL_PW:root}


rules:
  # 数据分片规则配置
  - !SHARDING
    tables:
      # 逻辑表名称
      t_order:
        # 由数据源名 + 表名组成（参考 Inline 语法规则）
        actualDataNodes: ds_${0..1}.t_order_${0..1}
        # 分片策略
        tableStrategy:
          standard:
            shardingColumn: order_id
            shardingAlgorithmName: t_order_inline
        # 分布式序列策略
        keyGenerateStrategy:
          # 自增列名称，缺省表示不使用自增主键生成器
          column: order_id
          # 分布式序列算法名称
          keyGeneratorName: snowflake
        # 分片审计策略
        auditStrategy:
          # 分片审计算法名称
          auditorNames:
            - sharding_key_required_auditor
          allowHintDisable: true
      t_order_item:
        actualDataNodes: ds_${0..1}.t_order_item_${0..1}
        tableStrategy:
          standard:
            shardingColumn: order_id
            shardingAlgorithmName: t_order_item_inline
        keyGenerateStrategy:
          column: order_item_id
          keyGeneratorName: snowflake
      t_user:
        actualDataNodes: ds_${0..1}.t_user_${0..1}
        tableStrategy:
          standard:
            shardingAlgorithmName: t_user_inline
        keyGenerateStrategy:
          column: id
          keyGeneratorName: snowflake
      t_account:
        actualDataNodes: ds_${0..1}.t_account_${0..1}
        tableStrategy:
          standard:
            shardingAlgorithmName: t_account_inline
        keyGenerateStrategy:
          column: account_id
          keyGeneratorName: snowflake
    defaultShardingColumn: account_id
    bindingTables:
      - t_order,t_order_item
    # 默认数据库分片策略
    defaultDatabaseStrategy:
      # 用于单分片键的标准分片场景
      standard:
        # 分片列名称
        shardingColumn: user_id
        # 分片算法名称
        shardingAlgorithmName: database_inline
    defaultTableStrategy:
      none:

    # 分片算法配置
    shardingAlgorithms:
      # 分片算法名称
      database_inline:
        # 分片算法类型
        type: INLINE
        # 分片算法属性配置
        props:
          algorithm-expression: ds_${user_id % 2}
      t_order_inline:
        type: INLINE
        props:
          algorithm-expression: t_order_${order_id % 2}
      t_order_item_inline:
        type: INLINE
        props:
          algorithm-expression: t_order_item_${order_id % 2}
      t_account_inline:
        type: INLINE
        props:
          algorithm-expression: t_account_${account_id % 2}
      t_user_inline:
        type: INLINE
        props:
          algorithm-expression: t_user_${id % 2}


    # 分布式序列算法配置
    keyGenerators:
      # 分布式序列算法名称
      snowflake:
        # 分布式序列算法类型
        type: SNOWFLAKE

    # 分片审计算法配置
    auditors:
      # 分片审计算法名称
      sharding_key_required_auditor:
        # 分片审计算法类型
        type: DML_SHARDING_CONDITIONS

  - !BROADCAST
    tables:
      - t_address

props:
  sql-show: true
